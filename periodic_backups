#!/usr/bin/perl

use Data::GUID;
use strict;
use warnings;
use DateTime;
use Sys::Hostname;
use Benchmark ':hireswallclock';
use Data::Dumper;
use Parallel::ForkManager;

my $syncoid = '/root/utils/sanoid/syncoid';
my $zfs = '/sbin/zfs';
my $ssh = '/usr/bin/ssh';
my $test = '/usr/bin/test';
my $mv = '/bin/mv';
my $host = hostname;
my $localDataSetParents = ['rpool/data', 'tank/data'];
my $remoteDataSets = [
    {
	user => 'root',
	host => 'bsys01.veracitynetworks.com',
	dataset => 'tank/backup',
	tokenLocation => '/root/utils/backup_token',
	tokenFreeName => 'token.free',
	tokenHeldName => "token.$host",
    },
    {
	user => 'root',
	host => 'bsys02.veracitynetworks.com',
	dataset => 'tank/backup',
	tokenLocation => '/root/utils/backup_token',
	tokenFreeName => 'token.free',
	tokenHeldName => "token.$host",
    },
    ];

sub find_config_dataset {
    my $choices = shift;

    foreach my $choice (@$choices) {
	my $result = `$zfs list -H -o name $choice`;
	return $choice if (index($result, $choice) > -1);
    }

    die "No config dataset found!";
}

my $configDataSet = find_config_dataset(['rpool/config', 'tank/config']);

sub get_local_datasets {
    my @localDataSets;

    foreach my $localDataSet (@$localDataSetParents) {
	push @localDataSets, # array of hashes
    	map { { 'name' => $_->[0],
		'type' => $_->[1],
    		'guid' => $_->[2],
		'source' => $_->[3],
    	    } } # { 'name' => <dataset_name>, 'guid' => <guid>, 'source' => <source> }
	grep { $_->[0] ne $localDataSet } # we only want children datasets of $localDataSet
	map { [split(' ',$_)] } #[<dataset_name>,<guid>,<source>]
	`$zfs list -H -r -o name,type,veracity:guid,veracity:source $localDataSet`;
    }

    return \@localDataSets;
}

sub get_token_from_backup_server {
    my $rds = shift;
    
    print "getting token from $rds->{host}...\n";

    my $remoteUserHost = $rds->{user} . '@' . $rds->{host};
    my $tokenFrom = $rds->{tokenLocation} . '/' . $rds->{tokenFreeName};
    my $tokenTo   = $rds->{tokenLocation} . '/' . $rds->{tokenHeldName};

    my $rc = 1;
    while($rc) {
	sleep(int(rand(10)));
    
	system $ssh, $remoteUserHost, $mv, $tokenFrom, $tokenTo;

	system $ssh, $remoteUserHost, $test, "-e", $tokenTo;
	$rc = $? >> 8;
    }
}

sub free_token_for_backup_server {
    my $rds = shift;

    print "freeing token for $rds->{host}\n";
    my $remoteUserHost = $rds->{user} . '@' . $rds->{host};
    my $tokenFrom = $rds->{tokenLocation} . '/' . $rds->{tokenHeldName};
    my $tokenTo   = $rds->{tokenLocation} . '/' . $rds->{tokenFreeName};

    system $ssh, $remoteUserHost, $mv, $tokenFrom, $tokenTo;
}

sub push_to_backup_server {
    my $localDatasets = shift;
    
    my $pfm = Parallel::ForkManager->new(10);
    
    foreach my $rds (@$remoteDataSets) {
	#Forks and returns the pid for the child
	my $pid = $pfm->start and next;

	#we are now in the child process, do the work
	get_token_from_backup_server($rds);

	# push config backup
	my $remoteDataSet = $rds->{user} . '@' . $rds->{host} . ':' . $rds->{dataset};
        my $cmd = qq|$syncoid --no-sync-snap --compress=none --sendoptions=-p $configDataSet $remoteDataSet/$host.config|;
        #timethis(1, $cmd);
	print "$cmd\n";
	`$cmd`;

	# push VM and containers to backup server
	foreach my $dataset (@$localDatasets) {
	    my $remoteDataSet = $rds->{user} . '@' . $rds->{host} . ':' . $rds->{dataset};
	    my $cmd;
	    if ($dataset->{'type'} eq 'filesystem') {
		$cmd = qq|$syncoid --no-sync-snap --compress=none --sendoptions=-p --recvoptions="-o refquota=none" $dataset->{'name'} $remoteDataSet/$dataset->{'guid'}|;
	    }
	    else { # type is 'volume'
		$cmd = qq|$syncoid --no-sync-snap --compress=none --sendoptions=-p $dataset->{'name'} $remoteDataSet/$dataset->{'guid'}|;
	    }
	    #timethis(1, $cmd);
	    print "$cmd\n";
	    `$cmd`;
	}

	free_token_for_backup_server($rds);

	$pfm->finish; #Terminate the child process
    }

    $pfm->wait_all_children;

    # # push config backup
    # foreach my $rds (@$remoteDataSets) {
    # 	my $remoteDataSet = $rds->{user} . '@' . $rds->{host} . ':' . $rds->{dataset};
    #     my $cmd = qq|$syncoid --no-sync-snap --compress=none --sendoptions=-p $configDataSet $remoteDataSet/$host.config|;
    # 	get_token_from_backup_server($rds);
    #     #timethis(1, $cmd);
    # 	print "$cmd\n";
    # 	`$cmd`;
    # 	free_token_for_backup_server($rds);
    # }

    # # push VM and containers to backup servers
    # foreach my $dataset (@$localDatasets) {
    # 	foreach my $rds (@$remoteDataSets) {
    # 	    my $remoteDataSet = $rds->{user} . '@' . $rds->{host} . ':' . $rds->{dataset};
    # 	    my $cmd;
    # 	    if ($dataset->{'type'} eq 'filesystem') {
    # 		$cmd = qq|$syncoid --no-sync-snap --compress=none --sendoptions=-p --recvoptions="-o refquota=none" $dataset->{'name'} $remoteDataSet/$dataset->{'guid'}|;
    # 	    }
    # 	    else { # type is 'volume'
    # 		$cmd = qq|$syncoid --no-sync-snap --compress=none --sendoptions=-p $dataset->{'name'} $remoteDataSet/$dataset->{'guid'}|;
    # 	    }
    # 	    get_token_from_backup_server($rds);
    # 	    #timethis(1, $cmd);
    # 	    print "$cmd\n";
    # 	    `$cmd`;
    # 	    free_token_for_backup_server($rds);
    # 	}
    # }
}

sub set_guid_on_datasets {
    my $datasets = shift;

    my $guid_regex = Data::GUID->string_guid_regex();
    
    foreach my $dataset (@$datasets) {
	if (not $dataset->{'guid'} =~ m|$guid_regex|) {
	    my $guid = Data::GUID->new()->as_string();
	    `$zfs set veracity:guid=$guid $dataset->{'name'}`;
	}
    }
}

sub set_source_on_datasets {
    my $datasets = shift;

    foreach my $dataset (@$datasets) {
	my $source = "$host.$dataset->{'name'}";
	if (not $dataset->{'source'} eq $source) {
	    print "source is $dataset->{'source'}, setting it to $source\n";
	    `$zfs set veracity:source=$source $dataset->{'name'}`;
	}
    }
}

sub main {
    my $localDatasets = get_local_datasets();
    set_guid_on_datasets($localDatasets);
    set_source_on_datasets($localDatasets);

    $localDatasets = get_local_datasets();

    push_to_backup_server($localDatasets);
}

main();
